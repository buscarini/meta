
#import "{{_globals_.fileBaseName}}.h"

#import <BMF/BMF.h>
#import <BMF/BMFObjectParserProtocol.h>
#import <BMF/BMFParserStrategy.h>
#import <BMF/BMFCompareParserStrategy.h>

#import <MagicalRecord/CoreData+MagicalRecord.h>

{{#content}}
{{> entityImports}}
{{> relationshipImports}}
{{> entityParserImports}}
{{> relationshipParserImports}}
{{/content}}

@interface {{_globals_.fileBaseName}}() <BMFObjectParserDelegateProtocol>
	
@property (nonatomic, strong) NSManagedObjectContext *localContext;
@property (nonatomic, strong) BMFParserStrategy *strategy;

{{#content}}
{{#model}}
@property (nonatomic, strong) {{> parserName}} *{{> parserName}}Instance;
{{#relationships}}
@property (nonatomic, strong) {{entityName}}Parser *{{entityName}}ParserInstance;
{{/relationships}}
{{/model}}
{{/content}}
	
@end
	
@implementation {{_globals_.fileBaseName}}

- (instancetype)init
{
    self = [super init];
    if (self) {
        _progress = [BMFProgress new];
    }
    return self;
}

#pragma mark BMFObjectParserDelegateProtocol

- (void) didParseObject:(id)object withDictionary:(NSDictionary *)dictionary {
	{{#content}}
	{{#model}}
	{{^_first_}}else {{/_first_}}if ([object isKindOfClass:[{{> entityName}} class]]) {
		{{> entityName}} *entity = object;
		{{#relationships}}
		{{entityName}}Parser *{{entityName}}ParserInstance = [[{{entityName}}Parser alloc] initWithContext:self.localContext];
		{{entityName}}ParserInstance.delegate = self;
		
		{{#_toMany_}}
		entity.{{name}} = [NSSet setWithArray:[self.strategy parseDictionaries:dictionary[@"{{name}}"] localObjects:entity.{{name}}.allObjects objectParser:{{entityName}}ParserInstance]];
		{{/_toMany_}}
		{{^_toMany_}}
		entity.{{name}} = [self.strategy parseDictionaries:@[dictionary[@"{{name}}"]] localObjects:@[entity.{{name}}] objectParser:{{entityName}}ParserInstance]].firstObject;
		{{/_toMany_}}
		{{/relationships}}
		
		self.progress.completedUnitCount++;
	}
	{{/model}}
	{{/content}}
}

- (void) parse:(NSDictionary *) rawObject completion:(BMFCompletionBlock) completionBlock {
	
	[self.progress start];
		
	{{#resultValue}}
	/// Check result
	id result = rawObject[@"{{key}}"];
	if (![result isEqual:{{{okValue}}}]) {
		NSString *errorMessage = rawObject[@"{{errorMessage.key}}"];
		if (!errorMessage) {
			errorMessage = BMFLocalized(@"Unknown error",nil);
		}
	    NSError *error = [NSError errorWithDomain:@"Parse" code:BMFErrorData userInfo:@{ NSLocalizedDescriptionKey : errorMessage }];
		[self.progress stop:error];
		if (completionBlock) completionBlock(nil,error);
		return;
	}
	{{/resultValue}}

	__block NSArray *results = nil;
	__block NSArray *dictionaries = nil;

	[MagicalRecord saveWithBlock:^(NSManagedObjectContext *localContext) {
		{{#content}}
		
		dictionaries = rawObject[@"{{key}}"];
		if (dictionaries.count>0) {
		
			self.progress.totalUnitCount = dictionaries.count;
		
			{{#model}}
			self.localContext = localContext;				
			self.strategy = [[BMFCompareParserStrategy alloc] init];
			{{#_globals_.batchSize}}
			self.strategy.batchSize = {{_globals_.batchSize}};
			{{/_globals_.batchSize}}


			self.{{> parserName}}Instance = [[{{> parserName}} alloc] initWithContext:localContext];
			self.{{> parserName}}Instance.delegate = self;

			results = [self.strategy parseDictionaries:dictionaries localObjects:[self.{{> parserName}}Instance fetchAllLocalObjectsSortedById] objectParser:self.{{> parserName}}Instance];
			{{/model}}
		}
		
		{{/content}}
	}
	completion:^(BOOL success, NSError *error) {
		[self.progress stop:nil];

		if (completionBlock) completionBlock(results,nil);
	}];

	// [self.progress stop:nil];
	// 
	// if (completionBlock) completionBlock(results,nil);
		
}

- (void) cancel {
    NSError *error = [NSError errorWithDomain:@"Parse" code:BMFErrorCancelled userInfo:@{ NSLocalizedDescriptionKey : BMFLocalized(@"Parse Operation Cancelled",nil) }];
	[self.progress stop:error];
}

@end
