var serviceItem = {}

{{#properties}}
{{^type_date}}
serviceItem.{{destination}} = item.{{name}}
{{/type_date}}
{{#type_date}}
serviceItem.{{destination}} = moment(item.{{name}}).format("{{format}}")
{{/type_date}}
{{/properties}}

{{#relationships}}
{{#_toMany_}}
var unpopulated = item.{{name}};
var populated = [];

var fillRelated = function(model,path,item,serviceItem,serviceItem) {

	var promise = model.populate(item,{ path: path });
	
	if (item instanceof Array) {
		var items = item;
		for (var index=0;index<items.length;index++) {
			var item = items[index];
			
			{{> fillServiceItem}}
			
			var serviceItemObj = {};

			{{#properties}}
				serviceItemObj.{{destination}} = item.{{name}};
			{{/properties}}

			serviceItem.push(serviceItemObj);
		}
	}
	else {
		{{#properties}}
			serviceItem.{{destination}} = item.{{name}};
		{{/properties}}
	}

	serviceItem.{{name}} = serviceItem;
	contentObject.{{key}}.push(serviceItem);
	finished(null);
};

if (unpopulated.length==0) {
	{{entityName}}.find({ {{inverse}}: item.{{#primaryKeys}}{{name}}{{/primaryKeys}} }).exec(function (err, items) {
		if (err) {
			res.send({"result": "1", "errorMessage":err.message});
		}
		else {
			unpopulated = items;
		}
		
		fillRelated({{model.entityName}},"{{#relationships}}{{name}}{{^_last_}} {{/_last_}}{{/relationships}}",unpopulated,populated,serviceItem);
	});
}
else {
	fillRelated({{model.entityName}},"{{#relationships}}{{name}}{{^_last_}} {{/_last_}}{{/relationships}}",unpopulated,populated,serviceItem);
}
{{/_toMany_}}
{{^_toMany_}}
var unpopulated = item.{{name}};
var populated = {};
{{#properties}}
populated.{{destination}} = unpopulated.{{name}};
{{/properties}}
serviceItem.{{name}} = populated;
contentObject.{{key}}.push(serviceItem);
finished(null);
{{/_toMany_}}
{{/relationships}}


