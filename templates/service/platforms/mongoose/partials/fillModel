{{#properties}}
{{^type_date}}
populated.{{destination}} = unpopulated.{{name}}
{{/type_date}}
{{#type_date}}
populated.{{destination}} = moment(unpopulated.{{name}}).format("{{format}}")
{{/type_date}}
{{/properties}}

{{#relationships}}
{{#_toMany_}}
var promise = {{entityName}}.populate(unpopulated,{ path: "{{#relationships}}{{name}}{{^_last_}} {{/_last_}}{{/relationships}}" });

var relatedUnpopulated = unpopulated.{{name}};
var relatedPopulated = [];
populated.{{name}} = relatedPopulated;

var fillRelated{{entityName}} = function(relatedUnpopulated,relatedPopulated,parent) {

	// var promise = model.populate(parent,{ path: path });
	
	if (!(relatedUnpopulated instanceof Array)) {
		relatedUnpopulated = [relatedUnpopulated]
	}
	
	for (var index=0;index<relatedUnpopulated.length;index++) {
		var unpopulated = relatedUnpopulated[index];
		var populated = {}
		
		{{> fillModel}}

		relatedPopulated.push(populated);
	}

	finished(null);
};

if (relatedUnpopulated.length==0) {
	{{entityName}}.find({ {{inverse}}: populated.{{#primaryKeys}}{{name}}{{/primaryKeys}} }).exec(function (err, items) {
		if (err) {
			res.send({"result": "1", "errorMessage":err.message});
		}
		else {
			relatedUnpopulated = items;
		}
		
		fillRelated{{entityName}}(relatedUnpopulated,relatedPopulated);
	});
}
else {
	fillRelated{{entityName}}(relatedUnpopulated,relatedPopulated);
}
{{/_toMany_}}
{{^_toMany_}}
var promise = {{entityName}}.populate(unpopulated,{ path: "{{#relationships}}{{name}}{{^_last_}} {{/_last_}}{{/relationships}}" });
var relatedUnpopulated = unpopulated.{{name}};
var relatedPopulated = {};
populated.{{name}} = relatedPopulated;
{{> fillModel}}
finished(null);
{{/_toMany_}}
{{/relationships}}
